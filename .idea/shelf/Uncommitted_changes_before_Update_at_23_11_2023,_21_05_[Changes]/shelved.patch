Index: Player.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tekstipeli\n\nimport scala.collection.mutable.Map\n\n/** A `Player` object represents a player character controlled by the real-life user\n  * of the program.\n  *\n  * A player object’s state is mutable: the player’s location and possessions can change,\n  * for instance.\n  *\n  * @param startingArea  the player’s initial location */\nclass Player(startingArea: Area):\n\n  private var currentLocation = startingArea        // gatherer: changes in relation to the previous location\n  private var quitCommandGiven = false              // one-way flag\n  private var currentInventory = Map[String, Item]()\n\n  /** Determines if the player has indicated a desire to quit the game. */\n  def hasQuit = this.quitCommandGiven\n\n  /** Returns the player’s current location. */\n  def location = this.currentLocation\n\n\n  /** Attempts to move the player in the given direction. This is successful if there\n    * is an exit from the player’s current location towards the direction name. Returns\n    * a description of the result: \"You go DIRECTION.\" or \"You can't go DIRECTION.\" */\n  def go(direction: String) =\n    val destination = this.location.neighbor(direction)\n    this.currentLocation = destination.getOrElse(this.currentLocation)\n    if destination.isDefined then \"You go \" + direction + \".\" else \"You can't go \" + direction + \".\"\n\n\n  /** Causes the player to rest for a short while (this has no substantial effect in game terms).\n    * Returns a description of what happened. */\n  def rest() =\n    \"You rest for a while. Better get a move on, though.\"\n\n\n  /** Signals that the player wants to quit the game. Returns a description of what happened within\n    * the game as a result (which is the empty string, in this case). */\n  def quit() =\n    this.quitCommandGiven = true\n    \"\"\n\n  def get(itemName: String): String =\n    var itemPick: String = \"\"\n    if this.location.contains(itemName) then\n      this.currentInventory += itemName -> this.location.removeItem(itemName).get\n      itemPick = s\"You pick up the $itemName.\"\n    else itemPick = s\"There is no $itemName here to pick up.\"\n    itemPick\n\n  def has(itemName: String): Boolean = this.currentInventory.contains(itemName)\n\n  def inventory: String =\n    var itemList: String = \"\"\n    if this.currentInventory.nonEmpty then\n      itemList = s\"You are carrying:\\n\" + this.currentInventory.keys.mkString(\"\\n\")\n    else itemList = \"You are empty-handed.\"\n    itemList\n\n\n  def examine(itemName: String): String =\n    var itemDesc: String = \"\"\n    if this.currentInventory.contains(itemName) then\n      itemDesc = s\"You look closely at the $itemName.\\n${currentInventory(itemName).description}\"\n    else itemDesc = \"If you want to examine something, you need to pick it up first.\"\n    itemDesc\n\n  def drop(itemName: String): String =\n    var itemDropped: String = \"\"\n    if this.currentInventory.contains(itemName) then\n        this.location.addItem(this.currentInventory(itemName))\n        this.currentInventory.remove(itemName)\n        itemDropped = s\"You drop the $itemName.\"\n    else itemDropped = \"You don't have that!\"\n    itemDropped\n\n  def fight(): String = ???\n\n  def chat(): String = ???\n\n    /** Returns a brief description of the player’s state, for debugging purposes. */\n  override def toString = \"Now at: \" + this.location.name\n\nend Player
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Player.scala b/Player.scala
--- a/Player.scala	
+++ b/Player.scala	
@@ -79,7 +79,8 @@
 
   def fight(): String = ???
 
-  def chat(): String = ???
+  def chat(): String =
+
 
     /** Returns a brief description of the player’s state, for debugging purposes. */
   override def toString = "Now at: " + this.location.name
